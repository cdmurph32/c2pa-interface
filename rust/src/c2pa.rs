// This file is @generated by wasmcloud/weld-codegen 0.6.0.
// It is not intended for manual editing.
// namespace: org.adobe.interface.c2pa

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message, MessageDispatch, MessageFormat,
        SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct CalculateInput {
    #[serde(with = "serde_bytes")]
    #[serde(default)]
    pub origin: Vec<u8>,
    #[serde(default)]
    pub origin_url: String,
    #[serde(default)]
    pub origin_filename: String,
    #[serde(default)]
    pub origin_mime_type: String,
    #[serde(with = "serde_bytes")]
    #[serde(default)]
    pub render: Vec<u8>,
    #[serde(default)]
    pub output_mime_type: String,
    #[serde(with = "serde_bytes")]
    #[serde(default)]
    pub thumb: Vec<u8>,
    #[serde(default)]
    pub thumb_mime_type: String,
}

// Encode CalculateInput as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_calculate_input<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &CalculateInput,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.array(8)?;
    e.bytes(&val.origin)?;
    e.str(&val.origin_url)?;
    e.str(&val.origin_filename)?;
    e.str(&val.origin_mime_type)?;
    e.bytes(&val.render)?;
    e.str(&val.output_mime_type)?;
    e.bytes(&val.thumb)?;
    e.str(&val.thumb_mime_type)?;
    Ok(())
}

// Decode CalculateInput from cbor input stream
#[doc(hidden)]
pub fn decode_calculate_input(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<CalculateInput, RpcError> {
    let __result = {
        let mut origin: Option<Vec<u8>> = None;
        let mut origin_url: Option<String> = None;
        let mut origin_filename: Option<String> = None;
        let mut origin_mime_type: Option<String> = None;
        let mut render: Option<Vec<u8>> = None;
        let mut output_mime_type: Option<String> = None;
        let mut thumb: Option<Vec<u8>> = None;
        let mut thumb_mime_type: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct CalculateInput, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => origin = Some(d.bytes()?.to_vec()),
                    1 => origin_url = Some(d.str()?.to_string()),
                    2 => origin_filename = Some(d.str()?.to_string()),
                    3 => origin_mime_type = Some(d.str()?.to_string()),
                    4 => render = Some(d.bytes()?.to_vec()),
                    5 => output_mime_type = Some(d.str()?.to_string()),
                    6 => thumb = Some(d.bytes()?.to_vec()),
                    7 => thumb_mime_type = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "origin" => origin = Some(d.bytes()?.to_vec()),
                    "origin_url" => origin_url = Some(d.str()?.to_string()),
                    "origin_filename" => origin_filename = Some(d.str()?.to_string()),
                    "origin_mime_type" => origin_mime_type = Some(d.str()?.to_string()),
                    "render" => render = Some(d.bytes()?.to_vec()),
                    "output_mime_type" => output_mime_type = Some(d.str()?.to_string()),
                    "thumb" => thumb = Some(d.bytes()?.to_vec()),
                    "thumb_mime_type" => thumb_mime_type = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        CalculateInput {
            origin: if let Some(__x) = origin {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CalculateInput.origin (#0)".to_string(),
                ));
            },

            origin_url: if let Some(__x) = origin_url {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CalculateInput.origin_url (#1)".to_string(),
                ));
            },

            origin_filename: if let Some(__x) = origin_filename {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CalculateInput.origin_filename (#2)".to_string(),
                ));
            },

            origin_mime_type: if let Some(__x) = origin_mime_type {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CalculateInput.origin_mime_type (#3)".to_string(),
                ));
            },

            render: if let Some(__x) = render {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CalculateInput.render (#4)".to_string(),
                ));
            },

            output_mime_type: if let Some(__x) = output_mime_type {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CalculateInput.output_mime_type (#5)".to_string(),
                ));
            },

            thumb: if let Some(__x) = thumb {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CalculateInput.thumb (#6)".to_string(),
                ));
            },

            thumb_mime_type: if let Some(__x) = thumb_mime_type {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CalculateInput.thumb_mime_type (#7)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// The C2Pa service has a single method, calculate, which
/// calculates the factorial of its whole number parameter.
/// wasmbus.contractId: wasmcloud:adobe:c2pa
/// wasmbus.providerReceive
/// wasmbus.actorReceive
#[async_trait]
pub trait C2Pa {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "wasmcloud:adobe:c2pa"
    }
    /// Calculates the factorial (n!) of the input parameter
    async fn embed_transcode_claim(
        &self,
        ctx: &Context,
        arg: &CalculateInput,
    ) -> RpcResult<Vec<u8>>;
}

/// C2PaReceiver receives messages defined in the C2Pa service trait
/// The C2Pa service has a single method, calculate, which
/// calculates the factorial of its whole number parameter.
#[doc(hidden)]
#[async_trait]
pub trait C2PaReceiver: MessageDispatch + C2Pa {
    async fn dispatch(&self, ctx: &Context, message: Message<'_>) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "EmbedTranscodeClaim" => {
                let value: CalculateInput = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'CalculateInput': {}", e)))?;

                let resp = C2Pa::embed_transcode_claim(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "C2Pa::{}",
                message.method
            ))),
        }
    }
}

/// C2PaSender sends messages to a C2Pa service
/// The C2Pa service has a single method, calculate, which
/// calculates the factorial of its whole number parameter.
/// client for sending C2Pa messages
#[derive(Debug)]
pub struct C2PaSender<T: Transport> {
    transport: T,
}

impl<T: Transport> C2PaSender<T> {
    /// Constructs a C2PaSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send> C2PaSender<wasmbus_rpc::provider::ProviderTransport<'send>> {
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl C2PaSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_actor(actor_id.to_string()).unwrap();
        Self { transport }
    }
}

#[cfg(target_arch = "wasm32")]
impl C2PaSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for sending to a C2Pa provider
    /// implementing the 'wasmcloud:adobe:c2pa' capability contract, with the "default" link
    pub fn new() -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_provider("wasmcloud:adobe:c2pa", "default")
                .unwrap();
        Self { transport }
    }

    /// Constructs a client for sending to a C2Pa provider
    /// implementing the 'wasmcloud:adobe:c2pa' capability contract, with the specified link name
    pub fn new_with_link(link_name: &str) -> wasmbus_rpc::error::RpcResult<Self> {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_provider("wasmcloud:adobe:c2pa", link_name)?;
        Ok(Self { transport })
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> C2Pa for C2PaSender<T> {
    #[allow(unused)]
    /// Calculates the factorial (n!) of the input parameter
    async fn embed_transcode_claim(
        &self,
        ctx: &Context,
        arg: &CalculateInput,
    ) -> RpcResult<Vec<u8>> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "C2Pa.EmbedTranscodeClaim",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: Vec<u8> = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': Blob", e)))?;
        Ok(value)
    }
}
